[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=395402194296][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_iam_role_policy.update_oidc_provider["alb_role"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "update_oidc_provider" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "update-oidc-provider"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = "dev-aws-load-balancer-controller-role"
    }

[1m  # aws_iam_role_policy.update_oidc_provider["pod_role"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "update_oidc_provider" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "update-oidc-provider"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = "dev-eks-pod-role"
    }

[1m  # module.alb.aws_lb.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "this" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enable_zonal_shift                                           = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "dev-TestProject22-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Cluster"      = "dev-eks-cluster"
          [32m+[0m[0m "Environment"  = "dev"
          [32m+[0m[0m "ManagedBy"    = "terraform"
          [32m+[0m[0m "Name"         = "dev-TestProject22-alb"
          [32m+[0m[0m "Organization" = "TestOrg22"
          [32m+[0m[0m "Project"      = "TestProject22"
          [32m+[0m[0m "Squad"        = "TestTeam22"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Cluster"      = "dev-eks-cluster"
          [32m+[0m[0m "Environment"  = "dev"
          [32m+[0m[0m "ManagedBy"    = "terraform"
          [32m+[0m[0m "Name"         = "dev-TestProject22-alb"
          [32m+[0m[0m "Organization" = "TestOrg22"
          [32m+[0m[0m "Project"      = "TestProject22"
          [32m+[0m[0m "Squad"        = "TestTeam22"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.alb.aws_lb_listener.http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "http" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 80
      [32m+[0m[0m protocol                                                              = "HTTP"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = (known after apply)
      [32m+[0m[0m tags_all                                                              = (known after apply)
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order = (known after apply)
          [32m+[0m[0m type  = "fixed-response"

          [32m+[0m[0m fixed_response {
              [32m+[0m[0m content_type = "text/plain"
              [32m+[0m[0m message_body = "No routes configured"
              [32m+[0m[0m status_code  = "404"
            }
        }
    }

[1m  # module.alb.aws_security_group.alb[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for the ALB"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow all outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow HTTP traffic"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow HTTPS traffic"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = "dev-TestProject22-alb-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"  = "dev"
          [32m+[0m[0m "ManagedBy"    = "terraform"
          [32m+[0m[0m "Name"         = "dev-TestProject22-alb-sg"
          [32m+[0m[0m "Organization" = "TestOrg22"
          [32m+[0m[0m "Project"      = "TestProject22"
          [32m+[0m[0m "Squad"        = "TestTeam22"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"  = "dev"
          [32m+[0m[0m "ManagedBy"    = "terraform"
          [32m+[0m[0m "Name"         = "dev-TestProject22-alb-sg"
          [32m+[0m[0m "Organization" = "TestOrg22"
          [32m+[0m[0m "Project"      = "TestProject22"
          [32m+[0m[0m "Squad"        = "TestTeam22"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.eks.aws_eks_cluster.main[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "main" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "dev-eks-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = (known after apply)
      [32m+[0m[0m tags_all                      = (known after apply)
      [32m+[0m[0m version                       = "1.32"

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = (known after apply)
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_eks_node_group.main["general"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "main" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "dev-eks-cluster"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m node_group_name        = "general"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 4
          [32m+[0m[0m min_size     = 1
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "eks" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
      [32m+[0m[0m thumbprint_list = [
          [32m+[0m[0m "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
        ]
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.update_load_balancer_controller_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "update_load_balancer_controller_role" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "dev-aws-load-balancer-controller-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.update_pod_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "update_pod_role" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "dev-eks-pod-role"
    }

[1m  # module.eks.aws_security_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for EKS cluster"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "dev-eks-cluster-cluster-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.helm_release.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "aws_load_balancer_controller" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "aws-load-balancer-controller"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "aws-load-balancer-controller"
      [32m+[0m[0m namespace                  = "kube-system"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://aws.github.io/eks-charts"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "1.7.1"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "clusterName"
          [32m+[0m[0m value = "dev-eks-cluster"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "region"
          [32m+[0m[0m value = "eu-west-2"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn"
          [32m+[0m[0m value = (known after apply)
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "vpcId"
          [32m+[0m[0m value = (known after apply)
        }
    }

[1m  # module.eks.kubernetes_ingress_class_v1.alb[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_ingress_class_v1" "alb" {
      [32m+[0m[0m id = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m annotations      = {
              [32m+[0m[0m "ingressclass.kubernetes.io/is-default-class" = "true"
            }
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "alb"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m controller = "ingress.k8s.aws/alb"
        }
    }

[1m  # module.eks.kubernetes_service_account.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service_account" "aws_load_balancer_controller" {
      [32m+[0m[0m automount_service_account_token = true
      [32m+[0m[0m default_secret_name             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m annotations      = (known after apply)
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "aws-load-balancer-controller"
          [32m+[0m[0m namespace        = "kube-system"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.iam.aws_iam_policy.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_load_balancer_controller" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "dev-aws-load-balancer-controller-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "iam:CreateServiceLinkedRole",
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:SetRulePriorities",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.iam.aws_iam_policy.eks_pod_base_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "eks_pod_base_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "dev-eks-pod-base-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.iam.aws_iam_role.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_load_balancer_controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRoleWithWebIdentity"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "/placeholder:sub" = "system:serviceaccount:kube-system:aws-load-balancer-controller"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Federated = "arn:aws:iam::395402194296:oidc-provider/placeholder"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-aws-load-balancer-controller-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.iam.aws_iam_role.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-eks-cluster-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.iam.aws_iam_role.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node_group" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-eks-node-group-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.iam.aws_iam_role.eks_pod_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_pod_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRoleWithWebIdentity"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "/placeholder:sub" = "system:serviceaccount:default:app-service-account"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Federated = "arn:aws:iam::395402194296:oidc-provider/placeholder"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-eks-pod-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.iam.aws_iam_role_policy_attachment.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_load_balancer_controller" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "dev-aws-load-balancer-controller-role"
    }

[1m  # module.iam.aws_iam_role_policy_attachment.eks_cluster_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "dev-eks-cluster-role"
    }

[1m  # module.iam.aws_iam_role_policy_attachment.eks_cni_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "dev-eks-node-group-role"
    }

[1m  # module.iam.aws_iam_role_policy_attachment.eks_container_registry_readonly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_container_registry_readonly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "dev-eks-node-group-role"
    }

[1m  # module.iam.aws_iam_role_policy_attachment.eks_pod_base_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_pod_base_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "dev-eks-pod-role"
    }

[1m  # module.iam.aws_iam_role_policy_attachment.eks_worker_node_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "dev-eks-node-group-role"
    }

[1m  # module.vpc.aws_eip.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "main" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = (known after apply)
      [32m+[0m[0m tags_all = (known after apply)
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "main" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = ""
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = (known after apply)
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.101.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.102.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = (known after apply)
      [32m+[0m[0m tags_all                             = (known after apply)
    }

[1mPlan:[0m 40 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_dns_name                  = (known after apply)
  [32m+[0m[0m eks_cluster_endpoint          = (known after apply)
  [32m+[0m[0m eks_cluster_name              = "dev-eks-cluster"
  [32m+[0m[0m eks_cluster_security_group_id = (known after apply)
  [32m+[0m[0m private_subnet_ids            = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m public_subnet_ids             = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m vpc_id                        = (known after apply)
