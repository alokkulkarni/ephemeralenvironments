# This workflow handles both validation and deployment of Terraform environments
# It validates tfvars on PR creation/update and immediately deploys the environment

name: terraform-environment-workflow

on:
  pull_request:
    branches:
      - main
      - master
      - develop
    paths:
      - 'aws/terraform.tfvars'

jobs:
  validate-and-deploy:
    name: Validate and Deploy Environment
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    env:
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Validate tfvars file
        id: validate
        run: |
          # Check if tfvars file exists
          if [ ! -f aws/terraform.tfvars ]; then
            echo "Error: terraform.tfvars file not found"
            exit 1
          fi

          # Validate required variables
          required_vars=(
            "environment"
            "aws_region"
            "project_name"
            "org_name"
            "squad_name"
            "enable_rds"
            "enable_dynamodb"
            "enable_s3"
            "enable_elasticache"
          )

          for var in "${required_vars[@]}"; do
            if ! grep -q "^$var" aws/terraform.tfvars; then
              echo "Error: Required variable '$var' not found in terraform.tfvars"
              exit 1
            fi
          done

          # Validate environment value
          if ! grep -qP 'environment\s*=\s*"(dev|staging|prod)"' aws/terraform.tfvars; then
            echo "Error: Invalid environment value in terraform.tfvars"
            exit 1
          fi

          # Validate AWS region
          if ! grep -qP 'aws_region\s*=\s*"(us-east-1|us-west-2|eu-west-1|eu-west-2|ap-southeast-1)"' aws/terraform.tfvars; then
            echo "Error: Invalid AWS region in terraform.tfvars"
            exit 1
          fi

          # Read project information for later use
          PROJECT_NAME=$(grep -Po 'project_name\s*=\s*"\K[^"]*' aws/terraform.tfvars)
          ORG_NAME=$(grep -Po 'org_name\s*=\s*"\K[^"]*' aws/terraform.tfvars)
          SQUAD_NAME=$(grep -Po 'squad_name\s*=\s*"\K[^"]*' aws/terraform.tfvars)
          ENVIRONMENT=$(grep -Po 'environment\s*=\s*"\K[^"]*' aws/terraform.tfvars)
          
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "org_name=$ORG_NAME" >> $GITHUB_OUTPUT
          echo "squad_name=$SQUAD_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Create environments directory
        id: env_dir
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          ENV_DIR="environments/${{ steps.validate.outputs.project_name }}-${{ steps.validate.outputs.org_name }}-${{ steps.validate.outputs.squad_name }}-${{ steps.validate.outputs.environment }}-${TIMESTAMP}"
          mkdir -p "$ENV_DIR"
          echo "env_dir=$ENV_DIR" >> $GITHUB_OUTPUT
          echo "ENV_DIR=$ENV_DIR" >> $GITHUB_ENV

      - name: Setup environment directory
        run: |
          # Create necessary subdirectories
          mkdir -p "${{ env.ENV_DIR }}/.terraform"
          mkdir -p "${{ env.ENV_DIR }}/logs"
          
          # Copy all Terraform files to the environment directory
          cp -r aws/* "${{ env.ENV_DIR }}/"
          
          # Create backend configuration
          cat > "${{ env.ENV_DIR }}/backend.tf" <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          
          # Create a README with environment details
          cat > "${{ env.ENV_DIR }}/README.md" <<EOF
          # Environment: ${{ steps.validate.outputs.project_name }}-${{ steps.validate.outputs.environment }}
          
          Created: $(date)
          Project: ${{ steps.validate.outputs.project_name }}
          Organization: ${{ steps.validate.outputs.org_name }}
          Squad: ${{ steps.validate.outputs.squad_name }}
          Environment: ${{ steps.validate.outputs.environment }}
          
          ## Files
          - \`terraform.tfvars\`: Environment variables
          - \`terraform.tfstate\`: Terraform state file
          - \`plan.out\`: Terraform plan output
          - \`logs/\`: Directory containing execution logs
          
          ## Logs
          - \`logs/init.log\`: Terraform initialization logs
          - \`logs/plan.log\`: Terraform plan logs
          - \`logs/apply.log\`: Terraform apply logs
          EOF

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform plugin cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo "plugin_cache_dir = \"$HOME/.terraform.d/plugin-cache\"" > ~/.terraformrc
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> $GITHUB_ENV

      - name: Cache Terraform plugins and modules
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.ENV_DIR }}/.terraform
            ${{ env.ENV_DIR }}/.terraform.lock.hcl
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('aws/**/*.tf', 'aws/**/*.tfvars') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        working-directory: ${{ env.ENV_DIR }}
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        run: |
          # First init without plugin-dir to download providers
          terraform init -upgrade -reconfigure | tee logs/init.log
          
          # Then init with plugin-dir to use cached providers
          terraform init \
            -reconfigure \
            -plugin-dir="${{ env.TF_PLUGIN_CACHE_DIR }}" \
            | tee -a logs/init.log

      - name: Terraform Plan
        working-directory: ${{ env.ENV_DIR }}
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
          TF_WORKSPACE: "default"
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -out="plan.out" \
            -parallelism=10 \
            -refresh=true \
            | tee logs/plan.log

      - name: Terraform Apply
        working-directory: ${{ env.ENV_DIR }}
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
          TF_WORKSPACE: "default"
        run: |
          terraform apply \
            -auto-approve \
            -var-file="terraform.tfvars" \
            | tee logs/apply.log

      - name: Set success flag
        if: success()
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "env_dir=${{ env.ENV_DIR }}" >> $GITHUB_OUTPUT

      - name: Upload environment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: environment-${{ github.head_ref }}
          path: ${{ env.ENV_DIR }}
          retention-days: 30

      - name: Commit environment folder
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Add environment for ${{ steps.validate.outputs.project_name }}-${{ steps.validate.outputs.environment }}"
          file_pattern: ${{ env.ENV_DIR }}
          branch: main

  create-issue:
    name: Create Environment Issue
    needs: validate-and-deploy
    if: needs.validate-and-deploy.outputs.success == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Create issue with Environment Details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const envDir = '${{ needs.validate-and-deploy.outputs.env_dir }}';
            const result = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Environment Created: ${{ needs.validate-and-deploy.outputs.project_name }}-${{ needs.validate-and-deploy.outputs.environment }}`,
              body: `## Environment Created Successfully ðŸŽ‰
              
              The environment has been created with the following details:
              
              - Project: ${{ needs.validate-and-deploy.outputs.project_name }}
              - Organization: ${{ needs.validate-and-deploy.outputs.org_name }}
              - Squad: ${{ needs.validate-and-deploy.outputs.squad_name }}
              - Environment: ${{ needs.validate-and-deploy.outputs.environment }}
              - Environment Directory: \`${envDir}\`
              
              ### Environment Contents
              - Terraform Configuration: \`${envDir}/\`
              - State File: \`${envDir}/terraform.tfstate\`
              - Plan Output: \`${envDir}/plan.out\`
              - Logs: \`${envDir}/logs/\`
                - Initialization: \`${envDir}/logs/init.log\`
                - Plan: \`${envDir}/logs/plan.log\`
                - Apply: \`${envDir}/logs/apply.log\`
              
              ### Artifacts
              All environment artifacts and logs are available in the workflow artifacts.
              
              Created from PR #${context.issue.number}
              
              \`\`\`json
              {
                "environment": {
                  "directory": "${envDir}",
                  "project": "${{ needs.validate-and-deploy.outputs.project_name }}",
                  "organization": "${{ needs.validate-and-deploy.outputs.org_name }}",
                  "squad": "${{ needs.validate-and-deploy.outputs.squad_name }}",
                  "type": "${{ needs.validate-and-deploy.outputs.environment }}",
                  "created_at": "${new Date().toISOString()}",
                  "pr_number": ${context.issue.number}
                }
              }
              \`\`\`
              `
            });
            
            // Add a comment to the PR with a link to the created issue
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Environment Created âœ…
              
              The environment has been successfully created.
              
              For details, see issue #${result.data.number}: [Environment Created: ${{ needs.validate-and-deploy.outputs.project_name }}-${{ needs.validate-and-deploy.outputs.environment }}](${result.data.html_url})
              
              Environment directory: \`${envDir}\`
              `
            }); 