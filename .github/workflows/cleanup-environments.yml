name: Cleanup Environments

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force_cleanup:
        description: 'Force cleanup of all environments (use with caution)'
        required: false
        type: boolean
        default: false
      environment_type:
        description: 'Specific environment type to clean up (dev/staging/prod)'
        required: false
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
        default: 'all'

jobs:
  cleanup:
    name: Cleanup Expired Environments
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      TF_IN_AUTOMATION: true
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          terraform_wrapper: false

      - name: Get Environments to Cleanup
        id: cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get all environment issues
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['environment'],
                state: 'open',
              });

              const now = new Date();
              const envsToCleanup = [];
              const forceCleanup = ${{ inputs.force_cleanup }};
              const envType = '${{ inputs.environment_type }}';

              for (const issue of issues.data) {
                try {
                  // Extract metadata from issue body
                  const jsonMatch = issue.body.match(/```json\n([\s\S]*?)\n```/);
                  if (!jsonMatch || !jsonMatch[1]) {
                    console.log(`Skipping issue #${issue.number}: No metadata found`);
                    continue;
                  }

                  const metadata = JSON.parse(jsonMatch[1]);
                  if (!metadata.environment) {
                    console.log(`Skipping issue #${issue.number}: Invalid metadata format`);
                    continue;
                  }

                  const env = metadata.environment;
                  
                  // Skip if environment type doesn't match (unless 'all' is selected)
                  if (envType !== 'all' && env.type !== envType) {
                    continue;
                  }

                  // Check if environment should be cleaned up
                  let shouldCleanup = false;
                  let cleanupReason = '';

                  if (forceCleanup) {
                    shouldCleanup = true;
                    cleanupReason = 'Forced cleanup requested';
                  } else if (env.status === 'active') {
                    // Check lifecycle settings
                    if (env.lifecycle?.auto_destroy && new Date(env.lifecycle.destroy_after) < now) {
                      shouldCleanup = true;
                      cleanupReason = `Environment expired on ${env.lifecycle.destroy_after}`;
                    } else if (env.lifecycle?.max_duration && env.created_at) {
                      const createdDate = new Date(env.created_at);
                      const maxDuration = env.lifecycle.max_duration * 24 * 60 * 60 * 1000; // Convert days to milliseconds
                      if (now - createdDate > maxDuration) {
                        shouldCleanup = true;
                        cleanupReason = `Environment exceeded maximum duration of ${env.lifecycle.max_duration} days`;
                      }
                    }
                  }

                  if (shouldCleanup) {
                    envsToCleanup.push({
                      issueNumber: issue.number,
                      name: issue.title.replace('[ENV] ', ''),
                      project: env.project,
                      organization: env.organization,
                      squad: env.squad,
                      type: env.type,
                      directory: env.directory,
                      reason: cleanupReason,
                      created_at: env.created_at,
                      destroy_after: env.lifecycle?.destroy_after,
                      max_duration: env.lifecycle?.max_duration
                    });
                  }
                } catch (error) {
                  console.error(`Error processing issue #${issue.number}:`, error);
                }
              }

              if (envsToCleanup.length > 0) {
                console.log('Found environments to cleanup:', envsToCleanup);
                core.setOutput('environments', JSON.stringify(envsToCleanup));
              } else {
                console.log('No environments found for cleanup');
                core.setOutput('environments', '[]');
              }
            } catch (error) {
              console.error('Error getting environments:', error);
              core.setFailed(`Failed to get environments: ${error.message}`);
            }

      - name: Verify Environment Directories
        id: verify
        run: |
          envs=$(echo '${{ steps.cleanup.outputs.environments }}' | jq -r '.[] | @base64')
          
          for env in $envs; do
            env_data=$(echo $env | base64 --decode)
            dir=$(echo $env_data | jq -r '.directory')
            issue=$(echo $env_data | jq -r '.issueNumber')
            
            if [ ! -d "$dir" ]; then
              echo "Warning: Environment directory not found for issue #$issue: $dir"
              continue
            fi
            
            if [ ! -f "$dir/terraform.tfvars" ]; then
              echo "Warning: terraform.tfvars not found in directory for issue #$issue: $dir"
              continue
            fi
            
            echo "Verified environment directory for issue #$issue: $dir"
          done

      - name: Trigger Environment Destruction
        if: steps.cleanup.outputs.environments != '[]'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const envsToCleanup = JSON.parse('${{ steps.cleanup.outputs.environments }}');
            const results = [];

            for (const env of envsToCleanup) {
              try {
                console.log(`Triggering destruction for environment ${env.name} (Issue #${env.issueNumber})`);

                // Add cleanup comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: env.issueNumber,
                  body: `## Environment Cleanup Started ðŸ§¹\n\n` +
                    `This environment is being cleaned up for the following reason:\n` +
                    `- ${env.reason}\n\n` +
                    `Environment details:\n` +
                    `- Project: ${env.project}\n` +
                    `- Organization: ${env.organization}\n` +
                    `- Squad: ${env.squad}\n` +
                    `- Type: ${env.type}\n` +
                    `- Created: ${env.created_at}\n` +
                    `- Directory: ${env.directory}\n\n` +
                    `The destruction workflow has been triggered.`
                });

                // Trigger destruction workflow
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'destroy-environment.yml',
                  ref: 'main',
                  inputs: {
                    issue_number: env.issueNumber.toString(),
                  },
                });

                results.push({
                  issueNumber: env.issueNumber,
                  name: env.name,
                  status: 'triggered',
                  reason: env.reason
                });

                // Add a small delay between triggers
                await new Promise(resolve => setTimeout(resolve, 5000));
              } catch (error) {
                console.error(`Error triggering destruction for ${env.name}:`, error);
                results.push({
                  issueNumber: env.issueNumber,
                  name: env.name,
                  status: 'failed',
                  error: error.message
                });
              }
            }

            // Set outputs for summary
            core.setOutput('results', JSON.stringify(results));

      - name: Create Cleanup Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = JSON.parse('${{ steps.cleanup.outputs.results || '[]' }}');
            const envsToCleanup = JSON.parse('${{ steps.cleanup.outputs.environments || '[]' }}');
            
            if (envsToCleanup.length > 0) {
              const summary = `## Environment Cleanup Summary\n\n` +
                `Cleanup run at: ${new Date().toISOString()}\n\n` +
                `Found ${envsToCleanup.length} environment(s) for cleanup:\n\n` +
                envsToCleanup.map(env => 
                  `### ${env.name} (Issue #${env.issueNumber})\n` +
                  `- Project: ${env.project}\n` +
                  `- Organization: ${env.organization}\n` +
                  `- Squad: ${env.squad}\n` +
                  `- Type: ${env.type}\n` +
                  `- Created: ${env.created_at}\n` +
                  `- Directory: ${env.directory}\n` +
                  `- Reason: ${env.reason}\n` +
                  `- Status: ${results.find(r => r.issueNumber === env.issueNumber)?.status || 'unknown'}\n`
                ).join('\n') +
                `\n\nDestruction workflows have been triggered for these environments.`;
              
              // Create a new issue for the cleanup summary
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Environment Cleanup - ${new Date().toISOString().split('T')[0]}`,
                body: summary,
                labels: ['cleanup', 'automated'],
              });
            } else {
              console.log('No environments were found for cleanup');
            } 